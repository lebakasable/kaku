const KAKU_AA_RES = 2

struct Kaku_Color {
   r char
   g char
   b char
   a char
}

fn kaku_color_new(r int, g int, b int) Kaku_Color {
   let color Kaku_Color
   color.r = (r&255) as char
   color.g = (g&255) as char
   color.b = (b&255) as char
   color.a = 255 as char
   return color
}

fn kaku_color_with_alpha(color Kaku_Color, a int) Kaku_Color {
   let color = color
   color.a = a as char
   return color
}

fn kaku_color_blend(c1 *Kaku_Color, c2 Kaku_Color) {
   c1.r = c1.r + (c2.r - c1.r)*c2.a/255 as char
   c1.g = c1.g + (c2.g - c1.g)*c2.a/255 as char
   c1.b = c1.b + (c2.b - c1.b)*c2.a/255 as char
}

struct Kaku_Font {
   width int
   height int
   glyphs *char
}

const KAKU_DEFAULT_FONT_HEIGHT = 5
const KAKU_DEFAULT_FONT_WIDTH = 5
let kaku_default_font_glyphs [128][KAKU_DEFAULT_FONT_HEIGHT][KAKU_DEFAULT_FONT_WIDTH]char
let kaku_default_font Kaku_Font

fn kaku_default_font_set_glyph_row(glyph char, row int, value Str) {
   for let i = 0, i < value.size, i += 1 {
      kaku_default_font_glyphs[glyph as int][row][i] = value.data[i]
   }
}

fn kaku_default_font_init() {
   kaku_default_font.width = KAKU_DEFAULT_FONT_WIDTH
   kaku_default_font.height = KAKU_DEFAULT_FONT_HEIGHT
   kaku_default_font.glyphs = &kaku_default_font_glyphs[0][0][0]

   kaku_default_font_set_glyph_row('a', 0, " ##  ")
   kaku_default_font_set_glyph_row('a', 1, "#  # ")
   kaku_default_font_set_glyph_row('a', 2, "#### ")
   kaku_default_font_set_glyph_row('a', 3, "#  # ")
   kaku_default_font_set_glyph_row('a', 4, "#  # ")

   kaku_default_font_set_glyph_row('b', 0, "###  ")
   kaku_default_font_set_glyph_row('b', 1, "#  # ")
   kaku_default_font_set_glyph_row('b', 2, "###  ")
   kaku_default_font_set_glyph_row('b', 3, "#  # ")
   kaku_default_font_set_glyph_row('b', 4, "###  ")

   kaku_default_font_set_glyph_row('c', 0, " ##  ")
   kaku_default_font_set_glyph_row('c', 1, "#    ")
   kaku_default_font_set_glyph_row('c', 2, "#    ")
   kaku_default_font_set_glyph_row('c', 3, "#    ")
   kaku_default_font_set_glyph_row('c', 4, " ##  ")

   kaku_default_font_set_glyph_row('d', 0, "###  ")
   kaku_default_font_set_glyph_row('d', 1, "#  # ")
   kaku_default_font_set_glyph_row('d', 2, "#  # ")
   kaku_default_font_set_glyph_row('d', 3, "#  # ")
   kaku_default_font_set_glyph_row('d', 4, "###  ")

   kaku_default_font_set_glyph_row('e', 0, "#### ")
   kaku_default_font_set_glyph_row('e', 1, "#    ")
   kaku_default_font_set_glyph_row('e', 2, "###  ")
   kaku_default_font_set_glyph_row('e', 3, "#    ")
   kaku_default_font_set_glyph_row('e', 4, "#### ")

   kaku_default_font_set_glyph_row('f', 0, " ##  ")
   kaku_default_font_set_glyph_row('f', 1, "#  # ")
   kaku_default_font_set_glyph_row('f', 2, "##   ")
   kaku_default_font_set_glyph_row('f', 3, "#    ")
   kaku_default_font_set_glyph_row('f', 4, "#    ")

   kaku_default_font_set_glyph_row('g', 0, " ##  ")
   kaku_default_font_set_glyph_row('g', 1, "#  # ")
   kaku_default_font_set_glyph_row('g', 2, " ##  ")
   kaku_default_font_set_glyph_row('g', 3, "  #  ")
   kaku_default_font_set_glyph_row('g', 4, "###  ")

   kaku_default_font_set_glyph_row('h', 0, "#  # ")
   kaku_default_font_set_glyph_row('h', 1, "#  # ")
   kaku_default_font_set_glyph_row('h', 2, "#### ")
   kaku_default_font_set_glyph_row('h', 3, "#  # ")
   kaku_default_font_set_glyph_row('h', 4, "#  # ")

   kaku_default_font_set_glyph_row('i', 0, "###  ")
   kaku_default_font_set_glyph_row('i', 1, " #   ")
   kaku_default_font_set_glyph_row('i', 2, " #   ")
   kaku_default_font_set_glyph_row('i', 3, " #   ")
   kaku_default_font_set_glyph_row('i', 4, "###  ")

   kaku_default_font_set_glyph_row('j', 0, "  ## ")
   kaku_default_font_set_glyph_row('j', 1, "   # ")
   kaku_default_font_set_glyph_row('j', 2, "   # ")
   kaku_default_font_set_glyph_row('j', 3, "#  # ")
   kaku_default_font_set_glyph_row('j', 4, " ##  ")

   kaku_default_font_set_glyph_row('k', 0, "#  # ")
   kaku_default_font_set_glyph_row('k', 1, "# #  ")
   kaku_default_font_set_glyph_row('k', 2, "##   ")
   kaku_default_font_set_glyph_row('k', 3, "# #  ")
   kaku_default_font_set_glyph_row('k', 4, "#  # ")

   kaku_default_font_set_glyph_row('l', 0, "#    ")
   kaku_default_font_set_glyph_row('l', 1, "#    ")
   kaku_default_font_set_glyph_row('l', 2, "#    ")
   kaku_default_font_set_glyph_row('l', 3, "#    ")
   kaku_default_font_set_glyph_row('l', 4, "#### ")

   kaku_default_font_set_glyph_row('m', 0, "#  # ")
   kaku_default_font_set_glyph_row('m', 1, "# ## ")
   kaku_default_font_set_glyph_row('m', 2, "## # ")
   kaku_default_font_set_glyph_row('m', 3, "#  # ")
   kaku_default_font_set_glyph_row('m', 4, "#  # ")

   kaku_default_font_set_glyph_row('n', 0, "#  # ")
   kaku_default_font_set_glyph_row('n', 1, "## # ")
   kaku_default_font_set_glyph_row('n', 2, "# ## ")
   kaku_default_font_set_glyph_row('n', 3, "#  # ")
   kaku_default_font_set_glyph_row('n', 4, "#  # ")

   kaku_default_font_set_glyph_row('o', 0, " ##  ")
   kaku_default_font_set_glyph_row('o', 1, "#  # ")
   kaku_default_font_set_glyph_row('o', 2, "#  # ")
   kaku_default_font_set_glyph_row('o', 3, "#  # ")
   kaku_default_font_set_glyph_row('o', 4, " ##  ")

   kaku_default_font_set_glyph_row('p', 0, "###  ")
   kaku_default_font_set_glyph_row('p', 1, "#  # ")
   kaku_default_font_set_glyph_row('p', 2, "###  ")
   kaku_default_font_set_glyph_row('p', 3, "#    ")
   kaku_default_font_set_glyph_row('p', 4, "#    ")

   kaku_default_font_set_glyph_row('q', 0, " ##  ")
   kaku_default_font_set_glyph_row('q', 1, "#  # ")
   kaku_default_font_set_glyph_row('q', 2, "#  # ")
   kaku_default_font_set_glyph_row('q', 3, " ##  ")
   kaku_default_font_set_glyph_row('q', 4, "   # ")

   kaku_default_font_set_glyph_row('r', 0, "###  ")
   kaku_default_font_set_glyph_row('r', 1, "#  # ")
   kaku_default_font_set_glyph_row('r', 2, "###  ")
   kaku_default_font_set_glyph_row('r', 3, "# #  ")
   kaku_default_font_set_glyph_row('r', 4, "#  # ")

   kaku_default_font_set_glyph_row('s', 0, " ##  ")
   kaku_default_font_set_glyph_row('s', 1, "#    ")
   kaku_default_font_set_glyph_row('s', 2, " ##  ")
   kaku_default_font_set_glyph_row('s', 3, "   # ")
   kaku_default_font_set_glyph_row('s', 4, "###  ")

   kaku_default_font_set_glyph_row('t', 0, "#### ")
   kaku_default_font_set_glyph_row('t', 1, " #   ")
   kaku_default_font_set_glyph_row('t', 2, " #   ")
   kaku_default_font_set_glyph_row('t', 3, " #   ")
   kaku_default_font_set_glyph_row('t', 4, " #   ")

   kaku_default_font_set_glyph_row('u', 0, "#  # ")
   kaku_default_font_set_glyph_row('u', 1, "#  # ")
   kaku_default_font_set_glyph_row('u', 2, "#  # ")
   kaku_default_font_set_glyph_row('u', 3, "#  # ")
   kaku_default_font_set_glyph_row('u', 4, " ##  ")

   kaku_default_font_set_glyph_row('v', 0, "#  # ")
   kaku_default_font_set_glyph_row('v', 1, "#  # ")
   kaku_default_font_set_glyph_row('v', 2, "#  # ")
   kaku_default_font_set_glyph_row('v', 3, " # # ")
   kaku_default_font_set_glyph_row('v', 4, "  #  ")

   kaku_default_font_set_glyph_row('w', 0, "#  # ")
   kaku_default_font_set_glyph_row('w', 1, "#  # ")
   kaku_default_font_set_glyph_row('w', 2, "#### ")
   kaku_default_font_set_glyph_row('w', 3, "#### ")
   kaku_default_font_set_glyph_row('w', 4, " ##  ")

   kaku_default_font_set_glyph_row('x', 0, "#  # ")
   kaku_default_font_set_glyph_row('x', 1, " # # ")
   kaku_default_font_set_glyph_row('x', 2, "  #  ")
   kaku_default_font_set_glyph_row('x', 3, " # # ")
   kaku_default_font_set_glyph_row('x', 4, "#  # ")

   kaku_default_font_set_glyph_row('y', 0, "#  # ")
   kaku_default_font_set_glyph_row('y', 1, " # # ")
   kaku_default_font_set_glyph_row('y', 2, "  #  ")
   kaku_default_font_set_glyph_row('y', 3, "  #  ")
   kaku_default_font_set_glyph_row('y', 4, "###  ")

   kaku_default_font_set_glyph_row('z', 0, "#### ")
   kaku_default_font_set_glyph_row('z', 1, "   # ")
   kaku_default_font_set_glyph_row('z', 2, "  #  ")
   kaku_default_font_set_glyph_row('z', 3, " #   ")
   kaku_default_font_set_glyph_row('z', 4, "#### ")
}

struct Kaku_Canvas {
   pixels *Kaku_Color
   width int
   height int
   stride int
}

fn kaku_canvas_new(pixels *Kaku_Color, width int, height int) Kaku_Canvas {
   let canvas Kaku_Canvas
   canvas.pixels = pixels
   canvas.width = width
   canvas.height = height
   canvas.stride = width
   return canvas
}

fn kaku_canvas_at(canvas *Kaku_Canvas, x int, y int) *Kaku_Color {
   return &canvas.pixels[y*canvas.stride + x]
}

fn kaku_swap_ints(a *int, b *int) {
   let t = *a
   *a = *b
   *b = t
}

fn kaku_normalize_rect(canvas *Kaku_Canvas, x int, y int, w int, h int, x1 *int, y1 *int, x2 *int, y2 *int) bool {
   *x1 = x
   *y1 = y

   *x2 = *x1 + sign(w)*(abs(w) - 1)
   if *x1 > *x2 { kaku_swap_ints(x1, x2) }
   *y2 = *y1 + sign(h)*(abs(h) - 1)
   if *y1 > *y2 { kaku_swap_ints(y1, y2) }

   if *x1 >= canvas.width { return false }
   if *x2 < 0 { return false }
   if *y1 >= canvas.height { return false }
   if *y2 < 0 { return false }

   if *x1 < 0 { *x1 = 0 }
   if *x2 >= canvas.width { *x2 = canvas.width - 1 }
   if *y1 < 0 { *y1 = 0 }
   if *y2 >= canvas.height { *y2 = canvas.height - 1 }

   return true
}

fn kaku_fill(canvas *Kaku_Canvas, color Kaku_Color) {
   for let y = 0, y < canvas.height, y += 1 {
      for let x = 0, x < canvas.width, x += 1 {
         *kaku_canvas_at(canvas, x, y) = color
      }
   }
}

fn kaku_rect(canvas *Kaku_Canvas, x int, y int, w int, h int, color Kaku_Color) {
   let x1 int let y1 int let x2 int let y2 int
   if !kaku_normalize_rect(canvas, x, y, w, h, &x1, &y1, &x2, &y2) {
      return
   }
   for let y = y1, y <= y2, y += 1 {
      for let x = x1, x <= x2, x += 1 {
         kaku_color_blend(kaku_canvas_at(canvas, x, y), color)
      }
   }
}

fn kaku_circle(canvas *Kaku_Canvas, cx int, cy int, r int, color Kaku_Color) {
   let x1 int let y1 int let x2 int let y2 int
   let r1 = r + sign(r)
   if !kaku_normalize_rect(canvas, cx - r1, cy - r1, 2*r1, 2*r1, &x1, &y1, &x2, &y2) {
      return
   }
   for let y = y1, y <= y2, y += 1 {
      for let x = x1, x <= x2, x += 1 {
         let count = 0
         for let soy = 0, soy < KAKU_AA_RES, soy += 1 {
            for let sox = 0, sox < KAKU_AA_RES, sox += 1 {
               let res1 = KAKU_AA_RES + 1
               let dx = x*res1*2 + 2 + sox*2 - res1*cx*2 - res1
               let dy = y*res1*2 + 2 + soy*2 - res1*cy*2 - res1
               if dx*dx + dy*dy <= res1*res1*r*r*2*2 { count += 1 }
            }
         }
         let alpha = color.a as int*count/KAKU_AA_RES/KAKU_AA_RES
         kaku_color_blend(kaku_canvas_at(canvas, x, y), kaku_color_with_alpha(color, alpha))
      }
   }
}

fn kaku_line(canvas *Kaku_Canvas, x1 int, y1 int, x2 int, y2 int, color Kaku_Color) {
   let dx = x2 - x1
   let dy = y2 - y1
   if dx != 0 {
      let c = y1 - dy*x1/dx
      if x1 > x2 { kaku_swap_ints(&x1, &x2) }
      for let x = x1, x <= x2, x += 1 {
         if 0 <= x && x < canvas.width {
            let y1 = dy*x/dx + c
            let y2 = dy*(x + 1)/dx + c
            if y1 > y2 { kaku_swap_ints(&y1, &y2) }
            for let y = y1, y <= y2, y += 1 {
               if 0 <= y && y < canvas.height {
                  kaku_color_blend(kaku_canvas_at(canvas, x, y), color)
               }
            }
         }
      }
   } else {
      let x = x1
      if 0 <= x && x < canvas.width {
         if y1 > y2 { kaku_swap_ints(&y1, &y2) }
         for let y = y1, y <= y2, y += 1 {
            if 0 <= y && y < canvas.height {
               kaku_color_blend(kaku_canvas_at(canvas, x, y), color)
            }
         }
      }
   }
}

fn kaku_triangle(canvas *Kaku_Canvas, x1 int, y1 int, x2 int, y2 int, x3 int, y3 int, color Kaku_Color) {
   if y1 > y2 {
      kaku_swap_ints(&x1, &x2)
      kaku_swap_ints(&y1, &y2)
   }
   if y2 > y3 {
      kaku_swap_ints(&x2, &x3)
      kaku_swap_ints(&y2, &y3)
   }
   if y1 > y2 {
      kaku_swap_ints(&x1, &x2)
      kaku_swap_ints(&y1, &y2)
   }
   let dx12 = x2 - x1
   let dy12 = y2 - y1
   let dx13 = x3 - x1
   let dy13 = y3 - y1
   for let y = y1, y <= y2, y += 1 {
      if 0 <= y && y < canvas.height {
         let s1 = x1 let s2 = x1
         if dy12 != 0 { s1 += (y - y1)*dx12/dy12 }
         if dy13 != 0 { s2 += (y - y1)*dx13/dy13 }
         if s1 > s2 { kaku_swap_ints(&s1, &s2) }
         for let x = s1, x <= s2, x += 1 {
            if 0 <= x && x < canvas.width {
               kaku_color_blend(kaku_canvas_at(canvas, x, y), color)
            }
         }
      }
   }

   let dx32 = x2 - x3
   let dy32 = y2 - y3
   let dx31 = x1 - x3
   let dy31 = y1 - y3
   for let y = y2, y <= y3, y += 1 {
      if 0 <= y && y < canvas.height {
         let s1 = x3 let s2 = x3
         if dy32 != 0 { s1 += (y - y3)*dx32/dy32 }
         if dy31 != 0 { s2 += (y - y3)*dx31/dy31 }
         if s1 > s2 { kaku_swap_ints(&s1, &s2) }
         for let x = s1, x <= s2, x += 1 {
            if 0 <= x && x < canvas.width {
               kaku_color_blend(kaku_canvas_at(canvas, x, y), color)
            }
         }
      }
   }
}

fn kaku_text(canvas *Kaku_Canvas, text Str, x int, y int, font Kaku_Font, glyph_size int, color Kaku_Color) {
   for let i = 0, i < text.size, i += 1 {
      let gx = x + i*font.width*glyph_size
      let gy = y
      let glyph = &font.glyphs[text.data[i] as int*font.width*font.height]
      for let dy = 0, dy < font.height, dy += 1 {
         for let dx = 0, dx < font.width, dx += 1 {
            let px = gx + dx*glyph_size
            let py = gy + dy*glyph_size
            if 0 <= px && px < canvas.width && 0 <= py && py < canvas.height {
               if glyph[dy*font.width + dx] == '#' {
                  kaku_rect(canvas, px, py, glyph_size, glyph_size, color)
               }
            }
         }
      }
   }
}

fn kaku_save_to_ppm(canvas *Kaku_Canvas, file_path *char) {
   let file File
   if !file_create(&file, file_path) {
      &stderr << "error: could not create file '" << str_from_cstr(file_path) << "'\n"
      exit(1)
   }

   &file << "P6\n" << canvas.width << "\n" << canvas.height << "\n255\n"
   for let i = 0, i < canvas.width*canvas.height, i += 1 {
      &file << canvas.pixels[i].r << canvas.pixels[i].g << canvas.pixels[i].b
   }
   file_close(&file)
}
